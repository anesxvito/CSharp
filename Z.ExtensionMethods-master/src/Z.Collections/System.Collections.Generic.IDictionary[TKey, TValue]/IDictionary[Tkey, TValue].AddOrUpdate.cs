using System;
using System.Collections.Generic;

public static partial class Extensions
{
    /// <summary>
    /// Adds or updates a key-value pair in the dictionary. If the key does not exist, adds the value; otherwise, updates the value.
    /// </summary>
    /// <typeparam name="TKey">The type of the dictionary keys.</typeparam>
    /// <typeparam name="TValue">The type of the dictionary values.</typeparam>
    /// <param name="dictionary">The dictionary to act on.</param>
    /// <param name="key">The key to add or update.</param>
    /// <param name="value">The value to add or update.</param>
    /// <returns>The new value for the key.</returns>
    public static TValue AddOrUpdate<TKey, TValue>(this IDictionary<TKey, TValue> dictionary, TKey key, TValue value)
    {
        if (!dictionary.ContainsKey(key))
        {
            dictionary.Add(key, value);
        }
        else
        {
            dictionary[key] = value;
        }

        return dictionary[key];
    }

    /// <summary>
    /// Adds or updates a key-value pair in the dictionary. If the key does not exist, adds the specified value; otherwise, updates the value using a factory function.
    /// </summary>
    /// <typeparam name="TKey">The type of the dictionary keys.</typeparam>
    /// <typeparam name="TValue">The type of the dictionary values.</typeparam>
    /// <param name="dictionary">The dictionary to act on.</param>
    /// <param name="key">The key to add or update.</param>
    /// <param name="addValue">The value to add if the key does not exist.</param>
    /// <param name="updateValueFactory">
    /// A factory function to generate the updated value for an existing key, based on its current value.
    /// </param>
    /// <returns>The new value for the key.</returns>
    public static TValue AddOrUpdate<TKey, TValue>(this IDictionary<TKey, TValue> dictionary, TKey key, TValue addValue, Func<TKey, TValue, TValue> updateValueFactory)
    {
        if (!dictionary.ContainsKey(key))
        {
            dictionary.Add(key, addValue);
        }
        else
        {
            dictionary[key] = updateValueFactory(key, dictionary[key]);
        }

        return dictionary[key];
    }

    /// <summary>
    /// Adds or updates a key-value pair in the dictionary. If the key does not exist, adds a value generated by a factory function; otherwise, updates the value using a factory function.
    /// </summary>
    /// <typeparam name="TKey">The type of the dictionary keys.</typeparam>
    /// <typeparam name="TValue">The type of the dictionary values.</typeparam>
    /// <param name="dictionary">The dictionary to act on.</param>
    /// <param name="key">The key to add or update.</param>
    /// <param name="addValueFactory">A factory function to generate the value for an absent key.</param>
    /// <param name="updateValueFactory">
    /// A factory function to generate the updated value for an existing key, based on its current value.
    /// </param>
    /// <returns>The new value for the key.</returns>
    public static TValue AddOrUpdate<TKey, TValue>(this IDictionary<TKey, TValue> dictionary, TKey key, Func<TKey, TValue> addValueFactory, Func<TKey, TValue, TValue> updateValueFactory)
    {
        if (!dictionary.ContainsKey(key))
        {
            dictionary.Add(key, addValueFactory(key));
        }
        else
        {
            dictionary[key] = updateValueFactory(key, dictionary[key]);
        }

        return dictionary[key];
    }
}
